var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import fetch from "cross-fetch";
import { ACCOUNTS_ENDPOINT, API_BASE_URL, API_PREFIX, EXPORTS_ENDPOINT, ISSUES_ENDPOINT, ITEMS_ENDPOINT, LISTS_ENDPOINT, SUBSCRIBERS_ENDPOINT, } from "./constants";
var RevueClient = /** @class */ (function () {
    function RevueClient(options) {
        if (!options.token) {
            throw new Error("Missing Revue API token");
        }
        this.token = options.token;
    }
    RevueClient.prototype.request = function (url, _a) {
        if (_a === void 0) { _a = {}; }
        var headers = _a.headers, body = _a.body, init = __rest(_a, ["headers", "body"]);
        return __awaiter(this, void 0, void 0, function () {
            var res, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, fetch("" + API_BASE_URL + API_PREFIX + url, __assign(__assign({}, init), { headers: __assign({ "Content-Type": "application/json", Authorization: "Token " + this.token }, headers), body: JSON.stringify(body) }))];
                    case 1:
                        res = _b.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _b.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    // Lists
    RevueClient.prototype.getAllLists = function () {
        return this.request(LISTS_ENDPOINT);
    };
    RevueClient.prototype.getSingleList = function (listId) {
        return this.request(LISTS_ENDPOINT + "/" + listId);
    };
    // Issues
    RevueClient.prototype.getAllSentIssues = function () {
        return this.request(ISSUES_ENDPOINT);
    };
    RevueClient.prototype.getCurrentIssue = function () {
        return this.request(ISSUES_ENDPOINT + "/current");
    };
    RevueClient.prototype.getLastSentIssue = function () {
        return this.request(ISSUES_ENDPOINT + "/latest");
    };
    // Items
    RevueClient.prototype.getInboxItems = function () {
        return this.request(ITEMS_ENDPOINT);
    };
    RevueClient.prototype.addItemToIssue = function (issueId, body) {
        return this.request(ISSUES_ENDPOINT + "/" + issueId + "/items", {
            method: "POST",
            body: body,
        });
    };
    // Subscribers
    RevueClient.prototype.getAllSubscribers = function () {
        return this.request(SUBSCRIBERS_ENDPOINT);
    };
    RevueClient.prototype.getAllUnsubscribed = function () {
        return this.request(SUBSCRIBERS_ENDPOINT + "/unsubscribed");
    };
    RevueClient.prototype.addSubscriber = function (body) {
        return this.request(SUBSCRIBERS_ENDPOINT, {
            method: "POST",
            body: body,
        });
    };
    RevueClient.prototype.updateSubscriber = function (body) {
        return this.request(SUBSCRIBERS_ENDPOINT, {
            method: "PATCH",
            body: body,
        });
    };
    RevueClient.prototype.unsubscribe = function (body) {
        return this.request(SUBSCRIBERS_ENDPOINT, {
            method: "POST",
            body: body,
        });
    };
    // Exports
    RevueClient.prototype.getAllExports = function () {
        return this.request(EXPORTS_ENDPOINT);
    };
    RevueClient.prototype.getSingleExport = function (exportId) {
        return this.request(EXPORTS_ENDPOINT + "/" + exportId);
    };
    RevueClient.prototype.startExport = function (listId) {
        return this.request(EXPORTS_ENDPOINT + "/lists/" + listId, {
            method: "POST",
        });
    };
    // Profile
    RevueClient.prototype.getProfileUrl = function () {
        return this.request(ACCOUNTS_ENDPOINT + "/me");
    };
    return RevueClient;
}());
export default RevueClient;
//# sourceMappingURL=client.js.map
import { AddSubscriberInput, RevueAddItemInput, RevueExport, RevueExportFromList, RevueExportID, RevueIssue, RevueIssueID, RevueItem, RevueList, RevueListID, RevueProfileUrl, RevueSubscriber, UnsubscribeInput, UpdateSubscriberInput } from "./types";
interface RequestOptions extends RequestInit {
    body?: any;
}
interface ClientOptions {
    token: string;
}
export default class RevueClient {
    token: string;
    constructor(options: ClientOptions);
    request<Result = any>(url: string, { headers, body, ...init }?: RequestOptions): Promise<Result>;
    getAllLists(): Promise<RevueList[]>;
    getSingleList(listId: RevueListID): Promise<RevueList>;
    getAllSentIssues(): Promise<RevueIssue[]>;
    getCurrentIssue(): Promise<RevueIssue>;
    getLastSentIssue(): Promise<RevueIssue>;
    getInboxItems(): Promise<RevueItem[]>;
    addItemToIssue(issueId: RevueIssueID, body: RevueAddItemInput): Promise<RevueItem>;
    getAllSubscribers(): Promise<RevueItem[]>;
    getAllUnsubscribed(): Promise<RevueItem[]>;
    addSubscriber(body: AddSubscriberInput): Promise<RevueSubscriber>;
    updateSubscriber(body: UpdateSubscriberInput): Promise<RevueSubscriber>;
    unsubscribe(body: UnsubscribeInput): Promise<RevueSubscriber>;
    getAllExports(): Promise<RevueExportFromList[]>;
    getSingleExport(exportId: RevueExportID): Promise<RevueExport>;
    startExport(listId: RevueListID): Promise<RevueExport>;
    getProfileUrl(): Promise<RevueProfileUrl>;
}
export {};
//# sourceMappingURL=client.d.ts.map